-- BEFORE Triggers

-- Enforce EventDate is not in the past
CREATE OR REPLACE TRIGGER trg_before_event_insert
BEFORE INSERT ON Events
FOR EACH ROW
BEGIN
    IF :NEW.EventDate < SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20003, 'Event date cannot be in the past.');
    END IF;
END;
/

-- Ensure TotalAmount in Booking is positive
CREATE OR REPLACE TRIGGER trg_before_booking_insert
BEFORE INSERT ON Booking
FOR EACH ROW
BEGIN
    IF :NEW.TotalAmount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Total amount must be greater than zero.');
    END IF;
END;
/

-- AFTER Triggers

-- Cascade cancel status to bookings when event is cancelled
CREATE OR REPLACE TRIGGER trg_after_event_cancel
AFTER UPDATE OF Status ON Events
FOR EACH ROW
WHEN (NEW.Status = 'Cancelled')
BEGIN
    UPDATE Booking
    SET BookingStatus = 'Cancelled'
    WHERE EventID = :OLD.EventID;
END;
/

-- Log welcome message after user signup
CREATE OR REPLACE TRIGGER trg_after_user_signup
AFTER INSERT ON Users
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Welcome, ' || :NEW.Name || '! Your account has been created.');
END;
/

-- Row-Level Triggers

-- Log seat availability changes
CREATE OR REPLACE TRIGGER trg_seat_availability_change
AFTER UPDATE OF Availability ON Seat
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Seat ' || :OLD.SeatNumber || ' at Venue ' || :OLD.VenueID || ' availability changed to ' || :NEW.Availability);
END;
/

-- Log booking status changes
CREATE OR REPLACE TRIGGER trg_booking_status_update
AFTER UPDATE OF BookingStatus ON Booking
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Booking ID ' || :OLD.BookingID || ' status changed from ' || :OLD.BookingStatus || ' to ' || :NEW.BookingStatus);
END;
/

-- Statement-Level Triggers

-- Log total seats updated after bulk update
CREATE OR REPLACE TRIGGER trg_after_seat_update
AFTER UPDATE ON Seat
BEGIN
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' seats were updated in total.');
END;
/

-- Log count of customer support issues deleted in bulk
CREATE OR REPLACE TRIGGER trg_after_support_bulk_delete
AFTER DELETE ON CustomerSupport
BEGIN
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' customer support issues were deleted.');
END;
/

-- Set-Oriented Triggers

-- Log count of new users added in bulk
CREATE OR REPLACE TRIGGER trg_after_bulk_user_insert
AFTER INSERT ON Users
BEGIN
    IF SQL%ROWCOUNT > 1 THEN
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' new users have been added.');
    END IF;
END;
/

-- Log count of payment status updates in bulk
CREATE OR REPLACE TRIGGER trg_after_payment_bulk_update
AFTER UPDATE OF Status ON Payment
BEGIN
    IF SQL%ROWCOUNT > 1 THEN
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' payments have been updated.');
    END IF;
END;
/
