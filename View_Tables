-- User Booking Overview
CREATE VIEW UserBookingOverview AS
SELECT 
    U.UserID,
    U.Name AS UserName,
    U.Email AS UserEmail,
    E.Title AS EventTitle,
    E.EventDate,
    B.BookingDate,
    B.TotalAmount,
    B.BookingStatus
FROM 
    Users U
JOIN 
    Booking B ON U.UserID = B.UserID
JOIN 
    Events E ON B.EventID = E.EventID;
SELECT * FROM UserBookingOverview;




-- Event Details with Venue
CREATE VIEW EventDetailsWithVenue AS
SELECT 
    E.EventID,
    E.Title AS EventTitle,
    E.Description,
    E.Category AS EventCategory,
    E.EventDate,
    E.EventTime,
    V.Name AS VenueName,
    V.Location AS VenueLocation,
    U.Name AS OrganizerName
FROM 
    Events E
JOIN 
    Venue V ON E.VenueID = V.VenueID
JOIN 
    Users U ON E.OrganizerID = U.UserID;
SELECT * FROM EventDetailsWithVenue;




-- Booking Summary
CREATE VIEW BookingSummary AS
SELECT 
    E.EventID,
    E.Title AS EventTitle,
    E.EventDate,
    COUNT(B.BookingID) AS TotalBookings,
    SUM(B.TotalAmount) AS TotalRevenue,
    AVG(B.TotalAmount) AS AverageTicketPrice
FROM 
    Events E
LEFT JOIN 
    Booking B ON E.EventID = B.EventID
GROUP BY 
    E.EventID, E.Title, E.EventDate;
SELECT * FROM BookingSummary;




-- Payment Status Overview
CREATE VIEW PaymentStatusOverview AS
SELECT 
    P.PaymentID,
    B.BookingID,
    U.Name AS UserName,
    U.Email AS UserEmail,
    P.Amount,
    P.PaymentMethod,
    P.Status AS PaymentStatus,
    P.PaymentDate,
    P.PaymentTime
FROM 
    Payment P
JOIN 
    Booking B ON P.BookingID = B.BookingID
JOIN 
    Users U ON B.UserID = U.UserID;
SELECT * FROM PaymentStatusOverview;




-- Customer Support Tickets
CREATE VIEW CustomerSupportTickets AS
SELECT 
    CS.SupportID,
    U.Name AS UserName,
    U.Email AS UserEmail,
    CS.IssueDescription,
    CS.IssueDate,
    CS.ResolutionStatus,
    CS.Feedback,
    CASE 
        WHEN CS.Feedback IS NOT NULL THEN 'Resolved' 
        ELSE 'Pending' 
    END AS FeedbackStatus
FROM 
    CustomerSupport CS
JOIN 
    Users U ON CS.UserID = U.UserID;
SELECT * FROM CustomerSupportTickets;




-- Seats Availability by Venue
CREATE VIEW SeatsAvailabilityByVenue AS
SELECT 
    V.VenueID,
    V.Name AS VenueName,
    COUNT(S.SeatID) AS TotalSeats,
    SUM(CASE WHEN S.Availability = 'Y' THEN 1 ELSE 0 END) AS AvailableSeats,
    SUM(CASE WHEN S.Availability = 'N' THEN 1 ELSE 0 END) AS BookedSeats,
    S.Category
FROM 
    Venue V
JOIN 
    Seat S ON V.VenueID = S.VenueID
GROUP BY 
    V.VenueID, V.Name, S.Category;
SELECT * FROM SeatsAvailabilityByVenue;




SELECT * FROM Venue;
SELECT * FROM Events;
SELECT * FROM Seat;
SELECT * FROM Booking;
SELECT * FROM Ticket;
SELECT * FROM Payment;
SELECT * FROM CustomerSupport;
