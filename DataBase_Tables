-- User Table
CREATE TABLE Users (
    UserID NUMBER PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    PhoneNumber VARCHAR2(15) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL,
    UserType VARCHAR2(20) CHECK (UserType IN ('Regular', 'Organizer')) NOT NULL
);
-- Venue Table
CREATE TABLE Venue (
    VenueID NUMBER PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Location VARCHAR2(255) NOT NULL,
    Capacity NUMBER NOT NULL,
    SeatingLayout VARCHAR2(4000)
);
-- Event Table
CREATE TABLE Events (
    EventID NUMBER PRIMARY KEY,
    Title VARCHAR2(100) NOT NULL,
    Description VARCHAR2(4000),
    Category VARCHAR2(20) CHECK (Category IN ('Movie', 'Concert', 'Sports', 'Play')) NOT NULL,
    EventDate DATE NOT NULL,
    EventTime TIMESTAMP NOT NULL,
    OrganizerID NUMBER NOT NULL,
    VenueID NUMBER NOT NULL,
    Status VARCHAR2(10) CHECK (Status IN ('Active', 'Cancelled')) NOT NULL,
    FOREIGN KEY (OrganizerID) REFERENCES Users(UserID),
    FOREIGN KEY (VenueID) REFERENCES Venue(VenueID),
    CONSTRAINT unique_event UNIQUE (Title, EventDate, EventTime, VenueID)
);
-- Seat Table
CREATE TABLE Seat (
    SeatID NUMBER PRIMARY KEY,
    VenueID NUMBER NOT NULL,
    SeatNumber VARCHAR2(10) NOT NULL,
    Category VARCHAR2(10) CHECK (Category IN ('Regular', 'VIP')) NOT NULL,
    Availability CHAR(1) CHECK (Availability IN ('Y', 'N')) NOT NULL,
    FOREIGN KEY (VenueID) REFERENCES Venue(VenueID),
    CONSTRAINT unique_seat UNIQUE (VenueID, SeatNumber)
);
-- Booking Table
CREATE TABLE Booking (
    BookingID NUMBER PRIMARY KEY,
    UserID NUMBER NOT NULL,
    EventID NUMBER NOT NULL,
    BookingDate DATE DEFAULT SYSDATE NOT NULL,
    BookingStatus VARCHAR2(10) CHECK (BookingStatus IN ('Confirmed', 'Cancelled')) NOT NULL,
    TotalAmount NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (EventID) REFERENCES Events(EventID)
);
-- Ticket Table
CREATE TABLE Ticket (
    TicketID NUMBER PRIMARY KEY,
    EventID NUMBER NOT NULL,
    SeatID NUMBER NOT NULL,
    Price NUMBER(10, 2) NOT NULL,
    QRCode VARCHAR2(255) UNIQUE NOT NULL,
    BookingID NUMBER NOT NULL,
    FOREIGN KEY (EventID) REFERENCES Events(EventID),
    FOREIGN KEY (SeatID) REFERENCES Seat(SeatID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);
-- Payment Table
CREATE TABLE Payment (
    PaymentID NUMBER PRIMARY KEY,
    BookingID NUMBER NOT NULL,
    Amount NUMBER(10, 2) NOT NULL,
    PaymentMethod VARCHAR2(20) CHECK (PaymentMethod IN ('CreditCard', 'DebitCard', 'Wallet', 'UPI')) NOT NULL,
    Status VARCHAR2(10) CHECK (Status IN ('Success', 'Failed')) NOT NULL,
    PaymentDate DATE DEFAULT SYSDATE NOT NULL,
    PaymentTime TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);
-- Customer Support Table
CREATE TABLE CustomerSupport (
    SupportID NUMBER PRIMARY KEY,
    UserID NUMBER NOT NULL,
    IssueDescription VARCHAR2(4000) NOT NULL,
    IssueDate DATE DEFAULT SYSDATE NOT NULL,
    ResolutionStatus VARCHAR2(50) NOT NULL,
    Feedback VARCHAR2(4000),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);
